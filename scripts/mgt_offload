#!/usr/local/bin/expect

log_user 0
# http://wiki.tcl.tk/10795
proc sgn x {expr {($x>0) - ($x<0)}}

proc default_work {src blocknum} {
	puts "default_work $src $blocknum"
	return 0
}

set work default_work
set HB0	/dev/acq400.0.hb/000

if {[file exists /mnt/local/mgt_offload_custom]} {
	# typically, this  will reassign work
	source /mnt/local/mgt_offload_custom
}

proc .. {a {b ""} {step 1}} {
#    if {$b eq ""} {set b $a; set a 0} ;# argument shift
    if {$b eq ""} {set b $a; } 
    if {![string is int $a] || ![string is int $b]} {
        scan $a %c a; scan $b %c b
        incr b $step ;# let character ranges include the last
        set mode %c
    } else {set mode %d}

    incr b
    set ss [sgn $step]
    if {[sgn [expr {$b - $a}]] == $ss} {
        set res [format $mode $a]
        while {[sgn [expr {$b-$step-$a}]] == $ss} {
            lappend res [format $mode [incr a $step]]
        }
        set res
    } ;# one-armed if: else return empty list
 }

proc axi_dma_once_busy {} {
	set fp [open /sys/module/acq420fmc/parameters/AXIDMA_ONCE_BUSY]
	gets $fp line
	close $fp
	if {[string first 1 $line] == 0} {
		puts "axi_dma_once_busy return 1"
		return 1
	} else {
		puts "axi_dma_once_busy return 0"
		return 0
	}	
}
proc set_mgt_buscomms {en} {
	set fp [open /dev/dsp1/MGT_CTRL.BUSCOMMS w]
	puts $fp $en
	close $fp
}

proc sigint_handler {} {
	set_mg_buscomms 0
	puts "cleared buscomms"
	exit 1
}

trap sigint_handler SIGINT


set PULL [open /dev/mgt400.A.pull_desc w]
chan configure $PULL -translation binary
chan configure $PULL -buffering none


proc set_mgt_pull_desc {mgt_block} {
	global PULL

	puts "set_mgt_pull_desc $mgt_block"
	
#	exec mgtdram_descgen $mgt_block > /dev/mgt400.A.pull_desc
	set fp [open "|mgtdram_descgen $mgt_block" r]	
	chan configure $fp -translation binary
	chan configure $fp -buffering none
	puts -nonewline $PULL [read $fp 4]
	flush $PULL
	close $fp	
}

# server controls axi PUSH to ZDRAM
proc server {} {	
	set zaxi [open /dev/acq400.0.axi0 r]
	
	while {[gets stdin line] >= 0} {
		puts "OK"
		
		if {[gets $zaxi aline] > 0} {
			puts "DONE $aline"
		} else {
			puts "ERROR"
		}
		
	}
	close $zaxi
	exit 0
}
proc upload_one {mgt_block} {
	global expect_out
	puts "upload_one hitme"
	send "HITME\r"
	expect OK {
		puts "axi0 start OK"
	}
	while {[axi_dma_once_busy] == 0} {
		after 10
	}
	set_mgt_pull_desc $mgt_block
	expect DONE {
		puts "axi0 $expect_out(buffer)"
	} ERROR {
		puts ERROR
		exit 1
	}
	axi_dma_once_busy
	puts "upload_one done"
}

set MAX_RETRY 0
if { [info exists ::env(MAX_RETRY)] } {
	set MAX_RETRY $::env(MAX_RETRY)
}

proc _upload_range {first last} {
	global work MAX_RETRY HB0
	
	foreach ii [.. $first $last] {
		upload_one $ii

		for { set rty 0 } { [$work $HB0 $ii] != 0 } { incr rty } {
			if { $rty >= $MAX_RETRY } {
				puts "ERROR retry exceeded"
				return
			}
		}
	}	
}
proc upload_range {first last} {
	set_mgt_buscomms 1
	_upload_range $first $last
	set_mgt_buscomms 0
}

if { $::argc == 1 } {
	if {[lindex $::argv 0] == "server" } {
		server
	}
}

spawn mgt_offload server

foreach arg $::argv {
	lassign [split $arg '-'] first last
	upload_range $first $last
}	
