#!/usr/local/bin/expect
# acq480 T50R termination


set LNAMES1 [ list \
	T50R_1 T50R_2 T50R_3 T50R_4 \
	T50R_5 T50R_6 T50R_7 T50R_8 ]

set DIR1 [ list \
 	out	out	out	out \
 	out	out	out	out ]

#	1	2	3	4	5	6	7	8
set LNAMESJ [ list \
	 FRQTBL BWSEL0 BWSEL1 FRQSEL0 FRQSEL1 FRQSEL2 FRQSEL3 RATE0 \
	 RATE1 	DBL2_BY INC 	DEC 	LOL 	LOS 	RESETn ]
set DIRJ [ list \
	out	out	in	out	out	out	out	in \
	in	out	out	out	in	in	out 	]

proc link_gpio {lnames outputs root gpio1 ngpio} {
	set nc [llength $lnames]
	set ngpio [expr min ($ngpio, $nc ) ]
	set gpio2 [expr $gpio1 + $ngpio]
	for {set ix 0} {[expr $gpio1+$ix < $gpio2]} {incr ix} {		
		set name [lindex $lnames $ix]		
		if { [string length $name] > 0 } {
			set gpx [expr $gpio1 + $ix]
			set io [lindex $outputs $ix]
			exec set.sys /sys/class/gpio/export $gpx
			exec set.sys  /sys/class/gpio/gpio$gpx/direction $io
			exec ln -s /sys/class/gpio/gpio$gpx/value \
				$root/$name
			exec ln -s /sys/class/gpio/gpio$gpx/direction \
				$root/.direction.$name
		}
	}
}

proc get_gpio12 {site addr} {
	set bus [expr $site + 1]
	set baddr "$bus-00$addr"
	set gpath "/sys/bus/i2c/devices/$baddr/gpio/gpiochip"
	set gpiochip [glob "$gpath*"]
	set pin1 [string range $gpiochip \
			[string length $gpath] [string length $gpiochip]]
	#	puts "get_gpio1 returning $pin1"
	set ngpio [exec cat $gpiochip/ngpio]
	return [list $pin1 $ngpio]
}

proc build_50R {site} {
	global LNAMES1 DIR1
	puts "build 50R knobs site:$site"
	set gpiox {}
	
	if { [catch {get_gpio12 $site 20} gpiox] } {
		puts "ERROR: failed to find device 20"
		return
	}
	lassign $gpiox gpio1 ngpio
	link_gpio $LNAMES1 $DIR1 "/dev/acq480/$site" $gpio1 $ngpio
	
	for {set ic 1} {$ic <= $ngpio} {incr ic} {
		file delete -force /etc/acq400/$site/T50R_$ic
		set tname [lindex $LNAMES1 [expr $ic - 1]]			
		exec ln -s /dev/acq480/$site/$tname \
			/etc/acq400/$site/$tname
	}	
	set fp [open "/etc/acq400/$site/groups" a+]
	puts $fp {T50R=T50R_[0-9]*}
	close $fp	
}

proc set_acq480_knob {site knob} {
	set filename "/dev/acq480/$site/$knob"
	set fileId [open $filename "w"]
	puts $fileId 1
	close $fileId
}
proc clr_acq480_knob {site knob} {
	set filename "/dev/acq480/$site/$knob"
	set fileId [open $filename "w"]
	puts $fileId 0
	close $fileId
}

proc build_jitter_cleaner {site} {
	global LNAMESJ DIRJ
	puts "build Jitter Cleaner site:$site"
	set gpiox {}
	
	if { [catch {get_gpio12 $site 22} gpiox] } {
		puts "NOTE: failed to find device 22, most likely not fitted"
		clr_acq480_knob $site JC_LOL
		clr_acq480_knob $site JC_LOS
		return
	}
	lassign $gpiox gpio1 ngpio
	set jcpath "/dev/acq480/$site/JC"
	link_gpio $LNAMESJ $DIRJ $jcpath $gpio1 $ngpio

	exec ln -s $jcpath/LOL /etc/acq400/$site/JC_LOL
	exec ln -s $jcpath/LOS /etc/acq400/$site/JC_LOS

	set_acq480_knob $site JC/DBL2_BY
	set_acq480_knob $site JC/RESETn
}

set SITES ""

if {! [info exists ::env(ACQ480_FIXED_TERM)] } {
	set use_gpio 1
} else {
	if {$::env(ACQ480_FIXED_TERM) != 0} {
		set use_gpio 0
	} else {
		set use_gpio 1
	}
}
if { $::argc > 0 } {
	set i 1
	foreach site $::argv {
		if { [string length $SITES] > 0 } {
			set SITES "$SITES,"
		}
		set SITES "$SITES$site"	
	} 	
	exec /sbin/insmod  /usr/local/lib/modules/acq480.ko acq480_sites=$SITES
	
	if {$use_gpio} {
	    	foreach site $::argv {	        	
			exec mkdir -p /dev/acq480/$site/JC
			build_50R $site
			build_jitter_cleaner $site
		}
	} 
	exec acq480_spi_mknod $SITES
} else {
	puts "usage acq480.init site1[ site 2...]	
}




