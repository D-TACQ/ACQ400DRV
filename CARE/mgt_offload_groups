#!/usr/local/bin/expect

log_user 0

# server controls axi PUSH to ZDRAM
proc server {} {		
	exec renice -20 -p [getpid]
	puts stderr "ready to serve"	
	while {[gets stdin line] >= 0} {		
		puts "OK"
		set zaxi [open /dev/acq400.0.axi0 w]		
		fconfigure $zaxi -buffering line
		puts $zaxi $line
		close $zaxi
		puts "DONE $line"
	}
	
	exit 0
}

if { $::argc == 1 } {
	if {[lindex $::argv 0] == "server" } {
		server
	}
}

# client from here on ..

# http://wiki.tcl.tk/10795

proc sgn x {expr {($x>0) - ($x<0)}}

proc default_work {src blocknum} {
	puts "default_work $src $blocknum"
	return 0
}
proc calc_ngroup {} {
	set nc [exec get.site 0 NCHAN]
	set nc3 [expr $nc/3]
	set ncx [expr $nc3*3]


	
	if { $nc == $ncx } {		
		return 12
	} else {		
		return 16
	}	
}

set SSTEP 0
if {[info exists env(SSTEP)]} {
    # okay, it's there, use it
    set SSTEP $env(SSTEP)
}
set work default_work
set HB0	/dev/acq400.0.hb/000

if {[info exists ::env(MGTOFFLOADCUSTOM)]} {
	puts "customisation: source $::env(MGTOFFLOADCUSTOM)"
	source $::env(MGTOFFLOADCUSTOM)
}

if {[info exists ::env(NGROUP)]} {
	set NGROUP $::env(NGROUP)
} else {
	set NGROUP [calc_ngroup]
}
puts "NGROUP $NGROUP blocks per upload"

# kludge to set length of "landing area DMA RAM -> SRC file length"	
# given NOMINAL 32xshorts samples, must calc NSAMPLES per buffer

# buffers fixed size 4MB

set BUFLEN 0x400000
set NOM_NCHAN 32
set NOM_SAMPLES_BUF  [expr $BUFLEN / $NOM_NCHAN / 2 ]
set AXIBUFS_NSAMPLES [expr $NOM_SAMPLES_BUF * $NGROUP]
set ctrl [open /dev/acq400/data/.control w]
puts $ctrl "COOKED=0 NSAMPLES=$AXIBUFS_NSAMPLES NCHAN=$NOM_NCHAN TYPE=SHORT"
close $ctrl
# REMOVEME ::env retained for compatible with old mgt_offload_custom_ftp
set ::env(AXIBUFS_NSAMPLES) $AXIBUFS_NSAMPLES	


proc .. {a {b ""} {step 1}} {
#    if {$b eq ""} {set b $a; set a 0} ;# argument shift
    if {$b eq ""} {set b $a; } 
    if {![string is int $a] || ![string is int $b]} {
        scan $a %c a; scan $b %c b
        incr b $step ;# let character ranges include the last
        set mode %c
    } else {set mode %d}

    incr b
    set ss [sgn $step]
    if {[sgn [expr {$b - $a}]] == $ss} {
        set res [format $mode $a]
        while {[sgn [expr {$b-$step-$a}]] == $ss} {
            lappend res [format $mode [incr a $step]]
        }
        set res
    } ;# one-armed if: else return empty list
 }


proc axi_dma_busy {} {
	set TDESC [exec cat /sys/kernel/debug/acq400_axi_dma/adma0/XILINX_DMA_TDESC.0x10]
	return [expr $TDESC != 0]
}

proc set_mgt_buscomms {en} {
	set fp [open /dev/dsp1/MGT_CTRL.BUSCOMMS w]
	puts $fp $en
	close $fp
}

proc force_dma0_only {en} {
	set fp [open /dev/acq400.0.knobs/force_dma0_only w]
	puts $fp $en
	close $fp	
}

proc sigint_handler {} {
	set_mgt_buscomms 0
	puts "cleared buscomms"
	exit 1
}

trap sigint_handler SIGINT




proc set_mgt_pull_desc {mgt_block} {
	global PULL

#	puts "set_mgt_pull_desc $mgt_block"

	set fp [open "|mgtdram_descgen $mgt_block" r]	
	chan configure $fp -translation binary
	chan configure $fp -buffering none
	
	puts -nonewline $PULL [read $fp]
	flush $PULL
	close $fp	

#	puts "set_mgt_pull_desc 99"
}


proc pgm_wait {line} {
	global SSTEP
	if { $SSTEP == 1 } {
		puts -nonewline "pgm_wait:$line>"
		flush stdout
		gets stdin gofer
		puts "pgm_wait:$line> 99"
	}
}

global PBCLW

proc get_pbclw {} {
	return [exec get.site 13 pull_buffer_count_lw]
}

proc check_pull_fifo_status {} {
	set UNDER_OVER	0x000c0000
	set sr [exec cat /sys/kernel/debug/mgt400/mgt400.A/DMA_FIFO_SR.0x2008]
	if {[expr $sr & $UNDER_OVER] != 0} {
		puts "ERROR:PULL FIFO STATUS ERROR $sr"
		exit 1
	}
}

proc get_axi0_int_count {} {
	set fp [open "|grep axi-dma0 /proc/interrupts"]
	gets $fp aline
	close $fp
	return [lindex [regexp -all -inline {\S+} $aline]  1 ]
}


proc upload_group {group to_group} {
	global expect_out PBCLW
	global PULL	
	set PULL [open /dev/mgt400.A.pull_desc w]
	chan configure $PULL -translation binary
	chan configure $PULL -buffering none
	
	if {[axi_dma_busy]} {
		puts stderr "ERROR axi_dma_busy from the get-go"
	}
	set int0 [get_axi0_int_count]
	send "$to_group\r"
	expect OK {
		puts -nonewline "axi0 start OK "
	}
	while {[axi_dma_busy] == 0} {
#		puts stderr "waiting axi_dma_busy"
		after 4
	}
	set_mgt_pull_desc $group
	expect -re "DONE (\[0-9]+)" {
#		puts "axi0 [string trim $expect_out(buffer)]"
	} timeout {
		puts "ERROR, script-side timeout"
	} ERROR {
		puts ERROR
		exit 1
	}
	if {[axi_dma_busy]} {
		puts "still busy .. [axi_dma_busy]"
	}
	set int1 [get_axi0_int_count]
	if {[expr $int1 - $int0] == 0} {
		puts "ERROR no axi-dma interrupt $int0 $int1"
	}

	check_pull_fifo_status

	close $PULL
	pgm_wait "upload_group done"
	return 0
}
set MAX_RETRY 0
if { [info exists ::env(MAX_RETRY)] } {
	set MAX_RETRY $::env(MAX_RETRY)
}



proc _upload_range {first last} {
	global work MAX_RETRY HB0 PBCLW NGROUP
	
	set PBCLW [get_pbclw]
	set gc 0
	set group [list]
	set to_group [list]
	
	for { set ii 0 } { $ii < $NGROUP } { incr ii } {
		lappend to_group $ii
	}
	foreach ii [.. $first $last] {
		lappend group $ii
		incr gc
		if { $gc < $NGROUP } {
			continue
		}
			
		for { set rty 0 } { [upload_group $group $to_group] != 0 } { incr rty } {
			if { $rty >= $MAX_RETRY } {
				puts "ERROR retry exceeded"
				return
			}
		}

		for { set rty 0 } { [$work $HB0 $ii] != 0 } { incr rty } {
			if { $rty >= $MAX_RETRY } {
				puts "ERROR retry exceeded"
				return
			}
		}
		set group [list]
		set gc 0
	}	
}
proc upload_range {first last} {
	set_mgt_buscomms 1
	_upload_range $first $last
	set_mgt_buscomms 0
}


spawn mgt_offload server

proc get_irq { irq } {
        set lin [exec grep $irq /proc/interrupts]
        set lst [regexp -inline -all -- {\S+} $lin]
        return [lindex $lst 1]
}


#exec /mnt/local/debugson
#exec /mnt/local/markall
force_dma0_only 1
set c0 [ get_irq axi-dma0 ]
foreach arg $::argv {
	lassign [split $arg '-'] first last
	upload_range $first $last
}
force_dma0_only 0
set c1 [ get_irq axi-dma0 ]
#exec /mnt/local/debugson -p
set buffs [expr $last - $first + 1]
set ints [expr $c1 - $c0]
puts "buffers: $buffs interrupts: $ints"
