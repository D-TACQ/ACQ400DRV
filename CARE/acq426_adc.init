#!/bin/sh

# --all is handy for humans, but CHIPS is easier to script ..
CHIPS=${CHIPS:-ABCDEFGH}
VERBOSE=${VERBOSE:-0}
LIVE=${LIVE:-1}

if [ "x$1" == "--all" ]; then
	export args="--all"
elif [ "x$1" != x${1#--chips*} ]; then
	export args="$1"
else
	export args="--chips=$CHIPS"
fi

args="$args -t1"

export SITE=${SITE:-1}

DATA32=$(cat /dev/acq400.${SITE}.knobs/data32)

echo "++ acq426_adc.init SITE:$SITE 01"

reset=${2:-1}

acq426_reg() {
	[ $VERBOSE -eq 1 ] && echo /etc/acq400/${SITE}/acq426_reg $args $*
	[ $LIVE -ne 0 ] && /etc/acq400/${SITE}/acq426_reg $args $*
}
acq426_mclkmon() {
	[ $VERBOSE -eq 1 ] && echo /etc/acq400/${SITE}/acq426_mclkmon $args $*
	[ $LIVE -ne 0 ] && /etc/acq400/${SITE}/acq426_mclkmon $args $*
}

acq426_readall() {
	[ $VERBOSE -eq 1 ] && echo /etc/acq400/${SITE}/acq426_readall $args $*
	[ $LIVE -ne 0 ] && /etc/acq400/${SITE}/acq426_readall $args $*
}

acq426_filter_all() {
	[ $VERBOSE -eq 1 ] && echo /etc/acq400/${SITE}/acq426_filter $args $*
	[ $LIVE -ne 0 ] && /etc/acq400/${SITE}/acq426_filter $args $*
}


### ACTION

logger -t acq426_adc.init 01
caput  $(hostname):0:ACQ426:POLL 0

[ $reset -eq 1 ] && set.site ${SITE} adc_reset 1
set.site $SITE data32 $DATA32 
# Read all the registers, this initial read seems to ensure the first writes are successful
acq426_readall
# set hi speed filter to avoid range errors
acq426_filter_all 2
# Initial values to registers

#acq426_reg 0x2 0xd10 # Low Power Mode
acq426_reg 0x2 0xd1 # High Performance Mode
acq426_reg 0x10 0x02 # Enable Input Ref Gain Correction
acq426_reg 0x12 0x01 # Dual channel mode. D0 and D1

acq426_reg 0x24 0x01 # VCM = AVDD/2 = 2.5 V
acq426_reg 0x25 0x28 # Switch on MCLK_CNT and Overvoltage monitor

FILTER=0
if [ -e /etc/acq400/${SITE}/acq426_filter_default ]; then
	FILTER=$(cat /etc/acq400/${SITE}/acq426_filter_default)
fi
acq426_filter_all $FILTER
echo $FILTER > /dev/acq400.${SITE}.knobs/filter_sel



# Data bitwidth
if [ $DATA32 -eq 1 ]; then
#	REG11=0x20    # no status bits
	REG11=0x30
else
#	REG11=0x00    # no status bits
	REG11=0x10
fi

set.site $SITE data32 $DATA32 
logger -t acq426_adc.init acq426_reg 0x11 $REG11
acq426_reg 0x11 $REG11

usleep 100000

#exit # Executing the readall command seems to be harmful! #SAR

#### Read all the registers
###acq426_knobs readall
###
###echo -e "\nOutput Mode; 1=Dual, 2=Quad"
###acq426_reg 0x12
###
###echo -e "\nBitwidth; 00=16, 20=24"
###acq426_reg 0x11
###
#### Read DEVICE_STATUS
###echo -e "\nLook for LOCK 0001: success"
###acq426_reg 0x15
###
#### Read DEVICE_STATUS
###echo -e "\nLook for errors 0000: good"
###acq426_reg 0x42

echo

echo "++ acq426_adc.init SITE:$SITE 99"

# adc_status == ffff is good
adc_status=0
set retry=0
#while [ "$adc_status" != "ffff" ]; do 
        retry=$((retry+1))
        logger -t acq426_adc.init retry $retry
        if [ $retry -gt 3 ]; then
        	logger -t acq426_adc.init retry $retry BIG HAMMER
		exec /usr/local/CARE/acq426_adc.init
	fi
	set.site $SITE _adc_hax  0x40   # set FPGA to include status bits in ADC word
	set.site $SITE _adc_hax  0x60   # + disable ODR
	set.site $SITE _adc_hax  0x40   # enable ODR
	usleep 100000
	adc_status=$(get.site $SITE adc_status)
        logger -t acq426_adc.init adc_status $adc_status
#done


logger -t acq426_adc.init 99




