#!/usr/local/bin/expect
# mgt_offload_hostpull
# mgt_offload_hostpull server : spawn from inetd
# mgt_offload_hostpull <noargs> : spawn from mgt_offload
# echo offload all | nc UUT 53991  
# spawns mgt_offload_hostpull server .. spawns mgt_offload, 
# calls mgt_offload_hostpull

log_file -noappend /var/log/mgt_offload_hostpull.log
log_user 0

# callback for mgt_offload - blocks while top level does the work on $blocknum

proc pull_work {src blocknum} {
	puts "pull_work $blocknum"
	gets stdin handshake
	return 0
}

# work is a global for mgt_offload
set work pull_work


if { ($::argc >= 1) && ([lindex $::argv 0] == "server") } {
	set fetch_range 0-2000

	if { $::argc == 2 } {
		set fetch_range [lindex $::argv 1]
	} else {
		if { [file exists /dev/shm/mgtd.job] } {
			set jf [open /dev/shm/mgtd.job r]
			gets $jf job
			close $jf
			regsub -all {"} $job {} job
			if { [regexp "ARGS=(\[0-9]+-\[0-9]+)" $job xx blocks] } {
				set fetch_range $blocks
			} elseif { [regexp "ARGS=(\[0-9]+)" $job xx block2] } {
				set fetch_range "0-$block2"
			}
			regexp $job b1 b2
		}
	}

	set ::env(MGTOFFLOADCUSTOM) $::argv0

	spawn mgt_offload $fetch_range
	after 2000
	set timeout 2

	while { 1 } {
		if { [catch {
			expect -re "pull_work (\[0-9]+)" {
				exec cat /dev/acq400/data/raw/0 >&@stdout
				send "CATBUF OK\r"
			} -re "buffers: (\[0-9]+) interrupts (\[0-9]+)" {
				exit
			} timeout {
				exit
			}
		} ] } { 
			break
		}
	}
}

